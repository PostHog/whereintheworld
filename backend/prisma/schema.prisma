generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  users       User[]
}

model User {
  id       Int     @id @default(autoincrement())
  fullName String
  email    String  @unique
  city     String
  state    String?
  country  String
  posts    Post[]
  team     Team?   @relation(fields: [teamId], references: [id])
  teamId   Int?
}

model Trip {
  id      Int      @id @default(autoincrement())
  user_id Int
  country String
  state   String
  city    String
  start   DateTime
  end     DateTime
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model City {
  geonameid         Int      @id // id of record in geonames database
  name              String // name of geographical point (utf8) varchar(200)
  ascii_name        String // name of geographical point in plain ascii characters, varchar(200)
  alternate_names   String // alternatenames, comma separated, ascii names automatically transliterated, convenience attribute from alternatename table, varchar(10000)
  latitude          Float // latitude in decimal degrees (wgs84)
  longitude         Float // longitude in decimal degrees (wgs84)
  feature_class     String // see http://www.geonames.org/export/codes.html, char(1)
  feature_code      String // see http://www.geonames.org/export/codes.html, varchar(10)
  country_code      String // ISO-3166 2-letter country code, 2 characters
  cc2               String // alternate country codes, comma separated, ISO-3166 2-letter country code, 200 characters
  admin1_code       String // fipscode (subject to change to iso code), see exceptions below, see file admin1Codes.txt for display names of this code; varchar(20)
  admin2_code       String // code for the second administrative division, a county in the US, see file admin2Codes.txt; varchar(80)
  admin3_code       String // code for third level administrative division, varchar(20)
  admin4_code       String // code for fourth level administrative division, varchar(20)
  population        Int? // bigint (8 byte int)
  elevation         Int? // in meters, integer
  dem               Int? // digital elevation model, srtm3 or gtopo30, average elevation of 3''x3'' (ca 90mx90m) or 30''x30'' (ca 900mx900m) area in meters, integer. srtm processed by cgiar/ciat.
  timezone          String // the timezone id (see file timeZone.txt) varchar(40)
  modification_date DateTime // date of last modification in yyyy-MM-dd format
}
